
public class BoardState {
	public static Object[] boardColumns = new Object[7];
	public Object [] possibleBoard = boardColumns;
	
	public static void makeBoard(int width, int height)
	{
		boardColumns = new Object[width];
		for(int i =0; i< width;i++)
		{
			boardColumns[i]=new int[height];
			for(int j=0;j<height;j++)
			{
				boardColumns[i[j]]=99;
				System.out.printf("%5d",boardColumns[i[j]]);
			}
			System.out.println();
		}
		
	}
	
	public static void makeMove(int move, Boolean isFinal)
	{
		//if isFinal set actual board, else set possible board to use for searching
		//set board to have a 0 or 1 dependent in the bottommost empty row in the column
		if(isFinal)
		{
			for (int i=0;i<=board[move].length;i++)
			{
				if (board[move][i]==99)
				{
					board[move][i]=1;
					break;
				}
			}
			for(int i =0; i < board[move].length;i++)
			{
				for(int j=0;j < board[i].length;j++)
				{
					System.out.printf("%5d",board[i][j]);
				}
				System.out.println();
			}
		}
		//Keeping track of board and moves
	}
	public static void deleteMove(int move)
	{
		//remove topmost filled space in the column specified
	}
}
